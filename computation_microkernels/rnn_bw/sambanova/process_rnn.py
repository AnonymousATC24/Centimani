# Script to generate results_rnn_train.csv from performance.json files generated by runs of cs-2

import json


time_step = [50, 25, 25, 50]  #m
batch_size = [64, 32, 16, 32]  
input_size = [256, 512, 512, 512]  #n
hidden_size = [256, 512, 512, 512] #k
depth = [16,64,128]

ttype = "mixed"
f = open("results_rnn_train.csv", "a")
f.write("mfg, mode, kernel_name, dtype, depth, batch_size, time_step, input_size, hidden_size, run_time, samples_per_sec, tflops_sample,tflops_time, util \n")

# rnn_model_dir_kernel"$i"_${depth[$d]}_${batch_sizes[$b]}_${m[$i]}_${n[$i]}_${k[$i]}
for d in range(3):
    for i in range(4):
        file_name = "rnn_model_dir_kernel"+str(i)+"_"+str(depth[d])+"_"+str(batch_size[i])+"_"+str(time_step[i])+"_"+str(input_size[i])+"_"+str(hidden_size[i])+"/performance.json"
        print(file_name)
        json_file = open(file_name)
        data = json.load(json_file)
        
        run_time = data["total_time"]
        samples_per_sec = data["samples_per_sec"]
        util = data["fabric_utilization"]

        # calculations based on samples per second 
        # (flop/sample) *  (samples/sec) = flops
        flops_sample =  2 * 4 * time_step[i] * input_size[i] * hidden_size[i] * 1 * batch_size[i] + 2 * 4 * time_step[i] * hidden_size[i] * hidden_size[i] * 1 * batch_size[i] * depth[d]
        tflops_sample = (flops_sample * samples_per_sec)/(10**12)

        # Calculations based on execution time. 
        flops_time = 2 * 4 * time_step[i] * input_size[i] * hidden_size[i] * 1 * batch_size[i] * depth[d] + 2 * 4 * time_step[i] * hidden_size[i] * hidden_size[i] * 1 * batch_size[i] 
        tflops_time = (flops_time / run_time) / 10**12  


        f.write("cs2, train, rnn_train, kernel_%d, %s, %d, %d, %d, %d, %d, %f, %f, %f, %f, %f\n" %(i, ttype, depth[d], batch_size[i], time_step[i], input_size[i], hidden_size[i],run_time, samples_per_sec, tflops_sample, tflops_time, util))
 
